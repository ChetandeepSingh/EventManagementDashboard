{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api'\n});\n\n// Attach JWT automatically on each request\nAPI.interceptors.request.use(cfg => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    cfg.headers.Authorization = `Bearer ${token}`;\n  }\n  return cfg;\n});\nexport default API;\n\n/* ======================== AUTH UTILITIES ======================== */\n\n/**\r\n * Sets or removes the authentication token in localStorage and API default headers.\r\n * @param {string|null} token - Token to set, or null to clear.\r\n */\nexport function setAuthToken(token) {\n  if (token) {\n    localStorage.setItem('token', token);\n    API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    localStorage.removeItem('token');\n    delete API.defaults.headers.common['Authorization'];\n  }\n}\n\n/**\r\n * Gets the current authentication token from localStorage.\r\n * @returns {string|null} The token if it exists, otherwise null.\r\n */\nexport function getAuthToken() {\n  return localStorage.getItem('token');\n}\n\n/**\r\n * Clears the authentication token from localStorage and API default headers.\r\n */\nexport function clearAuthToken() {\n  localStorage.removeItem('token');\n  delete API.defaults.headers.common['Authorization'];\n}\n\n/**\r\n * Sets the user's role in localStorage.\r\n * @param {string} role - The user's role to set.\r\n */\nexport function setUserRole(role) {\n  localStorage.setItem('role', role);\n}\n\n/**\r\n * Gets the user's role from localStorage.\r\n * @returns {string|null} The user's role if it exists, otherwise null.\r\n */\nexport function getUserRole() {\n  return localStorage.getItem('role');\n}\n\n/**\r\n * Clears the user's role from localStorage.\r\n */\nexport function clearUserRole() {\n  localStorage.removeItem('role');\n}\n\n/**\r\n * Checks if the user is authenticated by verifying the presence of a token.\r\n * @returns {boolean} True if authenticated, otherwise false.\r\n */\nexport function isAuthenticated() {\n  return !!getAuthToken();\n}\n\n/**\r\n * Checks if the user has a specific role.\r\n * @param {string} role - The role to check against.\r\n * @returns {boolean} True if the user has the specified role, otherwise false.\r\n */\nexport function hasRole(role) {\n  return getUserRole() === role;\n}\n\n/**\r\n * Clears all authentication-related data from localStorage and API headers.\r\n */\nexport function clearAuthData() {\n  clearAuthToken();\n  clearUserRole();\n}\n\n/**\r\n * Sets the authentication token and user role in localStorage and API headers.\r\n * @param {string} token - The authentication token.\r\n * @param {string} role - The user's role.\r\n */\nexport function setAuthData(token, role) {\n  setAuthToken(token);\n  setUserRole(role);\n}\n\n/**\r\n * Gets the current authentication data including token and role.\r\n * @returns {{ token: string|null, role: string|null }}\r\n */\nexport function getAuthData() {\n  return {\n    token: getAuthToken(),\n    role: getUserRole()\n  };\n}\n\n/**\r\n * Checks if the user is authenticated and has a specific role.\r\n * @param {string} role - The role to check against.\r\n * @returns {boolean} True if authenticated and has the specified role, otherwise false.\r\n */\nexport function isAuthenticatedWithRole(role) {\n  return isAuthenticated() && hasRole(role);\n}","map":{"version":3,"names":["axios","API","create","baseURL","process","env","REACT_APP_API_BASE_URL","interceptors","request","use","cfg","token","localStorage","getItem","headers","Authorization","setAuthToken","setItem","defaults","common","removeItem","getAuthToken","clearAuthToken","setUserRole","role","getUserRole","clearUserRole","isAuthenticated","hasRole","clearAuthData","setAuthData","getAuthData","isAuthenticatedWithRole"],"sources":["E:/New folder/Infinite Locus/Event Management/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api',\r\n});\r\n\r\n// Attach JWT automatically on each request\r\nAPI.interceptors.request.use((cfg) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    cfg.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return cfg;\r\n});\r\n\r\nexport default API;\r\n\r\n/* ======================== AUTH UTILITIES ======================== */\r\n\r\n/**\r\n * Sets or removes the authentication token in localStorage and API default headers.\r\n * @param {string|null} token - Token to set, or null to clear.\r\n */\r\nexport function setAuthToken(token) {\r\n  if (token) {\r\n    localStorage.setItem('token', token);\r\n    API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    localStorage.removeItem('token');\r\n    delete API.defaults.headers.common['Authorization'];\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the current authentication token from localStorage.\r\n * @returns {string|null} The token if it exists, otherwise null.\r\n */\r\nexport function getAuthToken() {\r\n  return localStorage.getItem('token');\r\n}\r\n\r\n/**\r\n * Clears the authentication token from localStorage and API default headers.\r\n */\r\nexport function clearAuthToken() {\r\n  localStorage.removeItem('token');\r\n  delete API.defaults.headers.common['Authorization'];\r\n}\r\n\r\n/**\r\n * Sets the user's role in localStorage.\r\n * @param {string} role - The user's role to set.\r\n */\r\nexport function setUserRole(role) {\r\n  localStorage.setItem('role', role);\r\n}\r\n\r\n/**\r\n * Gets the user's role from localStorage.\r\n * @returns {string|null} The user's role if it exists, otherwise null.\r\n */\r\nexport function getUserRole() {\r\n  return localStorage.getItem('role');\r\n}\r\n\r\n/**\r\n * Clears the user's role from localStorage.\r\n */\r\nexport function clearUserRole() {\r\n  localStorage.removeItem('role');\r\n}\r\n\r\n/**\r\n * Checks if the user is authenticated by verifying the presence of a token.\r\n * @returns {boolean} True if authenticated, otherwise false.\r\n */\r\nexport function isAuthenticated() {\r\n  return !!getAuthToken();\r\n}\r\n\r\n/**\r\n * Checks if the user has a specific role.\r\n * @param {string} role - The role to check against.\r\n * @returns {boolean} True if the user has the specified role, otherwise false.\r\n */\r\nexport function hasRole(role) {\r\n  return getUserRole() === role;\r\n}\r\n\r\n/**\r\n * Clears all authentication-related data from localStorage and API headers.\r\n */\r\nexport function clearAuthData() {\r\n  clearAuthToken();\r\n  clearUserRole();\r\n}\r\n\r\n/**\r\n * Sets the authentication token and user role in localStorage and API headers.\r\n * @param {string} token - The authentication token.\r\n * @param {string} role - The user's role.\r\n */\r\nexport function setAuthData(token, role) {\r\n  setAuthToken(token);\r\n  setUserRole(role);\r\n}\r\n\r\n/**\r\n * Gets the current authentication data including token and role.\r\n * @returns {{ token: string|null, role: string|null }}\r\n */\r\nexport function getAuthData() {\r\n  return {\r\n    token: getAuthToken(),\r\n    role: getUserRole(),\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if the user is authenticated and has a specific role.\r\n * @param {string} role - The role to check against.\r\n * @returns {boolean} True if authenticated and has the specified role, otherwise false.\r\n */\r\nexport function isAuthenticatedWithRole(role) {\r\n  return isAuthenticated() && hasRole(role);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}